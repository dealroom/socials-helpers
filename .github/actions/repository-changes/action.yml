# Auto-synced file, managed by [dealroom/mothership](https://github.com/dealroom/mothership)
# The changes to this file will be automatically overwritten on the next sync. Do not edit by hand!

name: Check Repository Changes
description: Checks if there are any changes in the terraform, charts, or only in the .github directory
inputs:
  github-token:
    description: GitHub token for authentication
    required: false
outputs:
  terraform:
    description: true if there are changes in the terraform directory
    value: ${{ steps.filter.outputs.terraform }}
  charts:
    description: true if there are changes in the charts directory
    value: ${{ steps.filter.outputs.charts }}
  github-only:
    description: true if only .github/ directory files changed
    value: ${{ steps.manual-check.outputs.result }}
runs:
  using: composite
  steps:
    - name: Get previous tag for tag-based events
      id: get-previous-tag
      if: github.ref_type == 'tag'
      uses: WyriHaximus/github-action-get-previous-tag@04e8485ecb6487243907e330d522ff60f02283ce # v1.4.0
    - name: Determine base and head references
      id: refs
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          # For PRs
          echo "base=" >> "$GITHUB_OUTPUT"  # paths-filter handles PR base automatically
          echo "base_ref=${{ github.event.pull_request.base.sha }}" >> "$GITHUB_OUTPUT"
          echo "head_ref=${{ github.event.pull_request.head.sha }}" >> "$GITHUB_OUTPUT"
        elif [[ "${{ github.ref_type }}" == "tag" ]]; then
          # For tags, use the previous tag
          PREVIOUS_TAG="${{ steps.get-previous-tag.outputs.tag }}"
          echo "base=${PREVIOUS_TAG}" >> "$GITHUB_OUTPUT"
          echo "base_ref=${PREVIOUS_TAG}" >> "$GITHUB_OUTPUT"
          echo "head_ref=${{ github.sha }}" >> "$GITHUB_OUTPUT"
        elif [[ -n "${{ github.event.before }}" ]] && [[ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]]; then
          # For push events with valid before SHA
          echo "base=${{ github.event.before }}" >> "$GITHUB_OUTPUT"
          echo "base_ref=${{ github.event.before }}" >> "$GITHUB_OUTPUT"
          echo "head_ref=${{ github.sha }}" >> "$GITHUB_OUTPUT"
        else
          # For all other events (release, workflow_dispatch, schedule, etc.) or first push
          # Use the default branch as base
          DEFAULT_BRANCH="${{ github.event.repository.default_branch || 'main' }}"
          echo "base=origin/${DEFAULT_BRANCH}" >> "$GITHUB_OUTPUT"
          echo "base_ref=origin/${DEFAULT_BRANCH}" >> "$GITHUB_OUTPUT"
          echo "head_ref=${{ github.sha }}" >> "$GITHUB_OUTPUT"
          # Configure git with token if provided
          if [[ -n "${{ inputs.github-token }}" ]]; then
            git config --global url."https://x-access-token:${{ inputs.github-token }}@github.com/".insteadOf "https://github.com/"
          fi
          # Fetch the default branch if needed
          git fetch origin "$DEFAULT_BRANCH" || true
        fi
    - name: Use paths-filter for terraform and charts
      id: filter
      uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
      with:
        token: ${{ inputs.github-token }}
        base: ${{ steps.refs.outputs.base }}
        filters: |
          terraform:
            - 'terraform/**'
          charts:
            - 'charts/**'
    - name: Manually check for github-only changes
      id: manual-check
      shell: bash
      run: |
        BASE_REF="${{ steps.refs.outputs.base_ref }}"
        HEAD_REF="${{ steps.refs.outputs.head_ref }}"
        # Check if we can create a valid revision range
        if ! git rev-list "${BASE_REF}".."${HEAD_REF}" >/dev/null 2>&1; then
          echo "Cannot create revision range between ${BASE_REF} and ${HEAD_REF}. Using default branch."
          DEFAULT_BRANCH="${{ github.event.repository.default_branch || 'main' }}"
          # Configure git with token if provided
          if [[ -n "${{ inputs.github-token }}" ]]; then
            git config --global url."https://x-access-token:${{ inputs.github-token }}@github.com/".insteadOf "https://github.com/"
          fi
          git fetch origin "$DEFAULT_BRANCH" || true
          BASE_REF="origin/$DEFAULT_BRANCH"
        fi
        if [[ -z "$CHANGED_FILES" ]]; then
          echo "Calculating diff between BASE: ${BASE_REF} and HEAD: ${HEAD_REF}"
          CHANGED_FILES=$(git diff --name-only "${BASE_REF}".."${HEAD_REF}")
        fi
        echo "Files changed:"
        echo "${CHANGED_FILES}"
        if [[ -z "$CHANGED_FILES" ]]; then
          echo "No changed files detected. Setting result to false."
          echo "result=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        IS_GITHUB_ONLY=true
        while IFS= read -r file; do
          if [[ ! "$file" =~ ^\.github/ ]]; then
            echo "Found file outside .github/: '$file'"
            IS_GITHUB_ONLY=false
            break
          fi
        done <<< "$CHANGED_FILES"
        echo "result=${IS_GITHUB_ONLY}" >> $GITHUB_OUTPUT
