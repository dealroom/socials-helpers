# Auto-synced file, managed by [dealroom/mothership](https://github.com/dealroom/mothership)
# The changes to this file will be automatically overwritten on the next sync. Do not edit by hand!

name: Add To Project
description: Add a PR to the project based on project number
inputs:
  project-number:
    description: The GitHub project number
    required: true
  github-token:
    description: The GitHub token to use
    required: true
runs:
  using: composite
  steps:
    # Get project data
    - shell: bash
      env:
        ORGANIZATION: dealroom
        PROJECT_NUMBER: ${{ inputs.project-number }}
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        gh api graphql -F query='
          query($org: String!, $number: Int!) {
            organization(login: $org){
              projectV2(number: $number) {
              id
              fields(first:20) {
                nodes {
                    ... on ProjectV2Field {
                    id
                    name
                  }
                  ... on ProjectV2SingleSelectField {
                    id
                    name
                    options {
                      id
                      name
                    }
                  }
                }
              }
            }
          }
        }' -F org=$ORGANIZATION \
          -F number=$PROJECT_NUMBER > project_data.json
        # IMPORTANT!: This workflow assumes a project with a single select field called "Status" that
        # includes an option called "Todo" and a date field called "Date posted".
        echo 'PROJECT_ID='$(jq '.data.organization.projectV2.id' project_data.json) >> $GITHUB_ENV
        echo 'DATE_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Date posted") | .id' project_data.json) >> $GITHUB_ENV
        echo 'STATUS_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .id' project_data.json) >> $GITHUB_ENV
        echo 'TODO_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="Todo") |.id' project_data.json) >> $GITHUB_ENV
    # Add PR to project
    - shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
        PR_ID: ${{ github.event.pull_request.node_id }}
      run: |
        item_id="$( gh api graphql -F query='
          mutation($project:ID!, $pr:ID!) {
            addProjectV2ItemById(input: {projectId: $project, contentId: $pr}) {
              item {
                id
              }
            }
          }' -F project=$PROJECT_ID \
            -F pr=$PR_ID \
            --jq '.data.addProjectV2ItemById.item.id')"
        echo 'ITEM_ID='$item_id >> $GITHUB_ENV
    # Current date in `yyyy-mm-dd` format
    - shell: bash
      run: echo "DATE=$(date +"%Y-%m-%d")" >> $GITHUB_ENV
    # Project item automation:
    #   - Sets the value of the `Status` field to `Todo`
    #   - Sets the value of the `Date posted` field to previously stored `$DATE` value
    - shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        gh api graphql -F query='
          mutation (
            $project: ID!
            $item: ID!
            $status_field: ID!
            $status_value: String!
            $date_field: ID!
            $date_value: Date!
          ) {
            set_status: updateProjectV2ItemFieldValue(input: {
              projectId: $project
              itemId: $item
              fieldId: $status_field
              value: {
                singleSelectOptionId: $status_value
                }
            }) {
              projectV2Item {
                id
              }
            }
            set_date_posted: updateProjectV2ItemFieldValue(input: {
              projectId: $project
              itemId: $item
              fieldId: $date_field
              value: {
                date: $date_value
              }
            }) {
              projectV2Item {
                id
              }
            }
          }' -F project=$PROJECT_ID \
            -F item=$ITEM_ID \
            -F status_field=$STATUS_FIELD_ID \
            -F status_value=${{ env.TODO_OPTION_ID }} \
            -F date_field=$DATE_FIELD_ID \
            -F date_value=$DATE --silent
