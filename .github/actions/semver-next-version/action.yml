# Auto-synced file, managed by [dealroom/mothership](https://github.com/dealroom/mothership)
# The changes to this file will be automatically overwritten on the next sync. Do not edit by hand!

name: Semver Get Next Version
description: Get the next version based on the latest tag
inputs:
  github-token:
    description: GitHub token to use for retrieving the latest tag
    required: true
  tag-prefix:
    description: |
      A prefix that will be striped when parsing tags (e.g. foobar/).
      Any other prefix will be ignored. Useful for monorepos.
    required: false
outputs:
  current:
    description: Current version number / latest tag.
    value: ${{ steps.final-outputs.outputs.current }}
  next:
    description: Next version number in format v0.0.0
    value: ${{ steps.final-outputs.outputs.next }}
runs:
  using: composite
  steps:
    - name: Get latest tag
      id: previous-tag
      uses: WyriHaximus/github-action-get-previous-tag@04e8485ecb6487243907e330d522ff60f02283ce # v1.4.0
      with:
        fallback: v0.0.0
        prefix: ${{ inputs.tag-prefix }}
    - name: Check if tags exist
      id: check-tags
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
        INPUT_TAG_PREFIX: ${{ inputs.tag-prefix }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        # Check if any tags exist with the given prefix
        set -e  # Exit on error

        if [[ -n "$INPUT_TAG_PREFIX" ]]; then
          # Escape INPUT_TAG_PREFIX for safe use in grep regex
          ESCAPED_PREFIX=$(printf '%s\n' "$INPUT_TAG_PREFIX" | sed 's/[[\.*^$()+?{|]]/\\&/g')
          TAG_COUNT=$(gh api "repos/${GITHUB_REPOSITORY}/tags" --paginate | jq -r '.[].name' | grep "^${ESCAPED_PREFIX}" | wc -l)
        else
          TAG_COUNT=$(gh api "repos/${GITHUB_REPOSITORY}/tags" --paginate | jq 'length')
        fi

        echo "tag_count=$TAG_COUNT" >> $GITHUB_OUTPUT

        # Set boolean flag for easier conditional logic
        if [[ "$TAG_COUNT" -eq 0 ]]; then
          echo "has_tags=false" >> $GITHUB_OUTPUT
        else
          echo "has_tags=true" >> $GITHUB_OUTPUT
        fi

        echo "Found $TAG_COUNT tags with prefix: '$INPUT_TAG_PREFIX'"
    - name: Prepare Initial Tag Vars
      id: prepare-initial-vars
      shell: bash
      env:
        INPUT_TAG_PREFIX: ${{ inputs.tag-prefix }}
      run: |
        FORMATTED_TAG_PREFIX=""
        if [[ -n "$INPUT_TAG_PREFIX" && "$INPUT_TAG_PREFIX" != */ ]]; then
          FORMATTED_TAG_PREFIX="${INPUT_TAG_PREFIX}/"
        elif [[ -n "$INPUT_TAG_PREFIX" ]]; then
          FORMATTED_TAG_PREFIX="$INPUT_TAG_PREFIX"
        fi
        INITIAL_VERSION="v1.0.0"
        FULL_TAG_NAME="${FORMATTED_TAG_PREFIX}${INITIAL_VERSION}"
        echo "formatted_prefix=$FORMATTED_TAG_PREFIX" >> $GITHUB_OUTPUT
        echo "initial_version=$INITIAL_VERSION" >> $GITHUB_OUTPUT
        echo "full_tag_name=$FULL_TAG_NAME" >> $GITHUB_OUTPUT
    - name: Handle initial release
      id: initial-release
      if: ${{ steps.check-tags.outputs.has_tags == 'false' }}
      env:
        FULL_TAG_NAME: ${{ steps.prepare-initial-vars.outputs.full_tag_name }}
        GH_TOKEN: ${{ inputs.github-token }}
      shell: bash
      run: |
        echo "No tags found. This is an initial release."
        # For initial release:
        # - current: empty/none (no current version exists)
        # - next: v1.0.0 (the first version to be created)
        echo "current=" >> $GITHUB_OUTPUT
        echo "next=${FULL_TAG_NAME}" >> $GITHUB_OUTPUT
    - name: Get Next Version
      id: semver
      if: ${{ steps.check-tags.outputs.has_tags == 'true' }}
      uses: ietf-tools/semver-action@000ddb2ebacad350ff2a15382a344dc05ea4c0a4 # v1.10.2
      with:
        token: ${{ inputs.github-token }}
        prefix: ${{ inputs.tag-prefix }}
        skipInvalidTags: true
        maxTagsToFetch: 100
        # Mapping conventional commits to semver (config-conventional)
        # @see https://github.com/conventional-changelog/commitlint/tree/master/%40commitlint/config-conventional#type-enum
        minorList: feat
        patchList: build, chore, ci, docs, fix, perf, refactor, revert, style, test
    - name: Set final outputs
      id: final-outputs
      shell: bash
      run: |
        # Use outputs from initial-release step if no tags exist
        if [[ "${{ steps.check-tags.outputs.has_tags }}" == "false" ]]; then
          echo "current=${{ steps.initial-release.outputs.current }}" >> $GITHUB_OUTPUT
          echo "next=${{ steps.initial-release.outputs.next }}" >> $GITHUB_OUTPUT
        else
          echo "current=${{ steps.semver.outputs.current }}" >> $GITHUB_OUTPUT
          echo "next=${{ steps.semver.outputs.next }}" >> $GITHUB_OUTPUT
        fi
