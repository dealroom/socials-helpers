# Auto-synced file, managed by [dealroom/mothership](https://github.com/dealroom/mothership)
# The changes to this file will be automatically overwritten on the next sync. Do not edit by hand!

name: Semver Get Next Version
description: Get the next version based on the latest tag
inputs:
  github-token:
    description: GitHub token to use for retrieving the latest tag
    required: true
  tag-prefix:
    description: |
      A prefix that will be striped when parsing tags (e.g. foobar/).
      Any other prefix will be ignored. Useful for monorepos.
    required: false
outputs:
  current:
    description: Current version number / latest tag.
    value: ${{ steps.semver.outputs.current }}
  next:
    description: Next version number in format v0.0.0
    value: ${{ steps.semver.outputs.next }}
runs:
  using: composite
  steps:
    - name: Get latest tag
      id: previous-tag
      uses: WyriHaximus/github-action-get-previous-tag@04e8485ecb6487243907e330d522ff60f02283ce # v1.4.0
      with:
        fallback: v0.0.0
        prefix: ${{ inputs.tag-prefix }}
    - name: Prepare Initial Tag Vars
      id: prepare-initial-vars
      shell: bash
      env:
        INPUT_TAG_PREFIX: ${{ inputs.tag-prefix }}
      run: |
        FORMATTED_TAG_PREFIX=""
        if [[ -n "$INPUT_TAG_PREFIX" && "$INPUT_TAG_PREFIX" != */ ]]; then
          FORMATTED_TAG_PREFIX="${INPUT_TAG_PREFIX}/"
        elif [[ -n "$INPUT_TAG_PREFIX" ]]; then
          FORMATTED_TAG_PREFIX="$INPUT_TAG_PREFIX"
        fi
        INITIAL_VERSION="v0.0.0"
        FULL_TAG_NAME="${FORMATTED_TAG_PREFIX}${INITIAL_VERSION}"
        echo "formatted_prefix=$FORMATTED_TAG_PREFIX" >> $GITHUB_OUTPUT
        echo "initial_version=$INITIAL_VERSION" >> $GITHUB_OUTPUT
        echo "full_tag_name=$FULL_TAG_NAME" >> $GITHUB_OUTPUT
    - name: Create initial tag (if not found)
      if: ${{ steps.previous-tag.outputs.tag == 'v0.0.0' }}
      env:
        FULL_TAG_NAME: ${{ steps.prepare-initial-vars.outputs.full_tag_name }}
        GH_TOKEN: ${{ inputs.github-token }}
      shell: bash
      run: |
        echo "No tags found. Creating initial tag: ${FULL_TAG_NAME}"
        OLDEST_COMMIT=$(git rev-list --max-parents=0 HEAD)
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag "${FULL_TAG_NAME}" $OLDEST_COMMIT

        # Use GitHub CLI for authenticated push
        gh api repos/${GITHUB_REPOSITORY}/git/refs \
          -X POST \
          -F ref="refs/tags/${FULL_TAG_NAME}" \
          -F sha="${OLDEST_COMMIT}"

        # Fetch the newly created tag so semver-action can see it
        git fetch origin tag "${FULL_TAG_NAME}"
    - name: Get Next Version
      id: semver
      uses: ietf-tools/semver-action@000ddb2ebacad350ff2a15382a344dc05ea4c0a4 # v1.10.2
      with:
        token: ${{ inputs.github-token }}
        prefix: ${{ inputs.tag-prefix }}
        skipInvalidTags: true
        maxTagsToFetch: 100
        fallbackTag: ${{ steps.prepare-initial-vars.outputs.full_tag_name }}
        # Mapping conventional commits to semver (config-conventional)
        # @see https://github.com/conventional-changelog/commitlint/tree/master/%40commitlint/config-conventional#type-enum
        minorList: feat
        patchList: build, chore, ci, docs, fix, perf, refactor, revert, style, test
    - name: Delete temporary tag (if created)
      if: ${{ steps.previous-tag.outputs.tag == 'v0.0.0' }}
      env:
        FULL_TAG_NAME: ${{ steps.prepare-initial-vars.outputs.full_tag_name }}
        GH_TOKEN: ${{ inputs.github-token }}
      shell: bash
      run: |
        echo "Deleting temporary initial tag: ${FULL_TAG_NAME}"
        git tag -d "${FULL_TAG_NAME}"

        # Use GitHub CLI for authenticated deletion
        gh api repos/${GITHUB_REPOSITORY}/git/refs/tags/${FULL_TAG_NAME} \
          -X DELETE || echo "Tag may have already been deleted"
