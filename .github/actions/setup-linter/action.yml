# Auto-synced file, managed by [dealroom/mothership](https://github.com/dealroom/mothership)
# The changes to this file will be automatically overwritten on the next sync. Do not edit by hand!

name: Setup Linting Process
description: Setup linting process for the repository
inputs:
  config-file:
    description: Configuration file to use for linting
    required: false
    default: .github/super-linter.env
  config-file-fix:
    description: Configuration file to use for fixing the linting concerns
    required: false
    default: .github/super-linter-fix.env
  external-setup:
    description: Whether to run the external setup action
    required: false
    default: false
    options:
      - true
      - false
  configure-ignores:
    description: Whether to configure ignores specific to linting process
    required: false
    default: false
    options:
      - true
      - false
  extensions:
    description: Extra extensions to install
    required: false
    default: none
  github-token:
    description: GitHub token to use for pulling private packages
    required: false
  docs-generate:
    description: Whether to generate the Terraform docs
    required: false
    default: false
    options:
      - true
      - false
runs:
  using: composite
  steps:
    # Load the configuration file into the environment (if available)
    - if: inputs.config-file != ''
      run: |
        if [ -f ${{ inputs.config-file }} ]; then
          grep -o '^[^#]*' ${{ inputs.config-file }} >> "$GITHUB_ENV"
        fi
      shell: bash
    # Load the configuration file for fixing into the environment (if available)
    - if: inputs.config-file-fix != ''
      run: |
        if [ -f ${{ inputs.config-file-fix }} ]; then
          grep -o '^[^#]*' ${{ inputs.config-file-fix }} >> "$GITHUB_ENV"
        fi
      shell: bash
    # Generate the composer auth token for private packages
    - run: echo "COMPOSER_AUTH={\"github-oauth\":{\"github.com\":\"${{ inputs.github-token }}\"}}" >> "$GITHUB_ENV"
      shell: bash
    # Run additional external setup action (if available)
    - if: inputs.external-setup == 'true'
      id: check-files
      uses: andstor/file-existence-action@076e0072799f4942c8bc574a82233e1e4d13e9d6 # v3.0.0
      with:
        files: ./.github/actions/setup-linter-external/action.yml
    - uses: ./.github/actions/setup-linter-external
      if: steps.check-files.outputs.files_exists == 'true'
      with:
        github-token: ${{ inputs.github-token }}
        extensions: ${{ inputs.extensions }}
        docs-generate: ${{ inputs.docs-generate }}
    # Configure .prettierignore file to ignore chart and helmfile files if helm is detected
    - if: inputs.configure-ignores == 'true'
      shell: bash
      run: |
        if [ -d ./charts ]; then
          if [ -f .prettierignore ]; then
            if ! grep -q "charts/" .prettierignore; then
                echo "charts/${REPO_NAME}/templates/**/*.yaml" >> .prettierignore
                echo "charts/${REPO_NAME}/values/**/*.yaml" >> .prettierignore
            fi
          else
            echo "charts/" > .prettierignore
          fi
        fi
        if [ -f helmfile.yaml.gotmpl ]; then
          if [ -f .prettierignore ]; then
            if ! grep -q "helmfile.yaml.gotmpl" .prettierignore; then
              echo "helmfile.yaml.gotmpl" >> .prettierignore
            fi
          else
            echo "helmfile.yaml.gotmpl" > .prettierignore
          fi
        fi
      env:
        REPO_NAME: ${{ github.event.repository.name }}
    # Add super-linter ignores to the gitignore file
    # These are generated by the super-linter action
    - if: inputs.configure-ignores == 'true'
      shell: bash
      run: |
        if [ -f .gitignore ]; then
          if ! grep -q "super-linter-output" .gitignore; then
            echo "super-linter-output" >> .gitignore
          fi
          if ! grep -q "super-linter.log" .gitignore; then
            echo "super-linter.log" >> .gitignore
          fi
          if ! grep -q "github_conf" .gitignore; then
            echo "github_conf" >> .gitignore
          fi
        else
          echo "super-linter-output" > .gitignore
          echo "super-linter.log" >> .gitignore
          echo "github_conf" >> .gitignore
        fi
    # Add prettier ignores to README.md files due to TF docs generation issues
    - if: inputs.configure-ignores == 'true'
      shell: bash
      run: |
        add_ignore() {
          local marker="$1"
          local comment="$2"
          find . -type f -name "README.md" -print0 | \
          xargs -0 sed -i "/<!-- ${marker} -->/!b;/<!-- ${comment} -->/!${3} <!-- ${comment} -->"
        }
        ensure_no_duplicates() {
          find . -type f -name "README.md" -print0 | \
            xargs -0 sed -i '/<!-- textlint-disable terminology -->/d; /<!-- textlint-enable terminology -->/d;'
          find . -type f -name "README.md" -print0 | \
            xargs -0 sed -i '/<!-- markdownlint-disable MD034 -->/d; /<!-- markdownlint-enable MD034 -->/d;'
          find . -type f -name "README.md" -print0 | \
            xargs -0 sed -i '/<!-- prettier-ignore-start -->/d; /<!-- prettier-ignore-end -->/d;'
        }
        ensure_no_duplicates
        add_ignore "BEGIN_TF_DOCS" "textlint-disable terminology" "i"
        add_ignore "END_TF_DOCS" "textlint-enable terminology" "a"
        add_ignore "BEGIN_TF_DOCS" "markdownlint-disable MD034" "i"
        add_ignore "END_TF_DOCS" "markdownlint-enable MD034" "a"
        add_ignore "BEGIN_TF_DOCS" "prettier-ignore-start" "i"
        add_ignore "END_TF_DOCS" "prettier-ignore-end" "a"
    - if: inputs.configure-ignores == 'true'
      shell: bash
      run: |
        if [ -d terraform ]; then
          if [ -f .gitignore ]; then
            if ! grep -qF ".external_modules" .gitignore; then
              echo ".external_modules" >> .gitignore
            fi
            if ! grep -qF "**/.external_modules" .gitignore; then
              echo "**/.external_modules" >> .gitignore
            fi
          else
            echo ".external_modules" > .gitignore
            echo "**/.external_modules" >> .gitignore
          fi
        fi
    # Add additional ignores to the gitignore file to prevent secrets from being committed
    - if: inputs.configure-ignores == 'true'
      shell: bash
      run: |
        if [ -f .gitignore ]; then
          if ! grep -q "^gha-creds-" .gitignore; then
            echo "gha-creds-*" >> .gitignore
          fi
          if ! grep -q "^*key.json" .gitignore; then
            echo "*key.json" >> .gitignore
          fi
          if ! grep -q "^*.netrc" .gitignore; then
              echo "*.netrc" >> .gitignore
          fi
        else
          echo "gha-creds-*" > .gitignore
          echo "*key.json" >> .gitignore
          echo "*.netrc" >> .gitignore
        fi
    # @deprecated START
    # You can remove these steps once they have been executed in all repositories
    - name: Temporarily remove removed actions
      if: github.event.repository.name != 'mothership'
      shell: bash
      run: |
        rm -rf ./.github/actions/build-push-docker-image || true
        rm -rf ./.github/actions/setup-yarn || true
        rm -rf ./.github/actions/setup-linter-external || true
    - name: Temporarily remove reusable workflows
      if: github.event.repository.name != 'mothership'
      shell: bash
      run: |
        rm -rf ./.github/workflows/reusable_build.yml || true
        rm -rf ./.github/workflows/reusable_ghcr_cleanup.yml || true
        rm -rf ./.github/project_add_core.yml || true
        rm -rf ./.github/project_add_platform.yml || true
    # @deprecated END
