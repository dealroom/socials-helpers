name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

permissions: read-all

concurrency:
  group: ${{ github.workflow }}-${{ github.event.issue.number || github.event.pull_request.number }}-${{ github.event.comment.id || github.event.review.id || github.event.issue.id || github.run_id }}
  cancel-in-progress: false

env:
  # renovate: datasource=github-releases depName=docker/compose
  DOCKER_COMPOSE_VERSION: v2.38.1
  # renovate: datasource=github-releases depName=dealroom/room
  ROOM_CLI_VERSION: v1.282.11

jobs:
  claude:
    if: |
      !endsWith(github.actor, '[bot]') &&
      (
        (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
        (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
        (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
        (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
      )
    runs-on: ubuntu-24.04
    permissions:
      contents: write # To checkout the repository
      pull-requests: write # To create pull requests
      issues: write # To comment on issues
      id-token: write # To retrieve the OIDC token for the claude-code-action
      actions: write # To modify workflow files
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0 # Room CLI needs full git history
      - name: Check repository access
        id: check-access
        run: |
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/collaborators/${{ github.actor }}/permission")
          PERMISSION=$(echo "$RESPONSE" | jq -r .permission)
          if [[ "$PERMISSION" == "admin" || "$PERMISSION" == "write" ]]; then
            echo "authorized=true" >> "$GITHUB_OUTPUT"
            echo "User ${{ github.actor }} has $PERMISSION access - authorized"
          else
            echo "authorized=false" >> "$GITHUB_OUTPUT"
            echo "User ${{ github.actor }} has $PERMISSION access - not authorized (need write or admin)"
          fi
      - name: Parse allowed tools from settings
        id: parse-tools
        run: |
          # Read the allowed tools from .claude/settings.local.json
          if [ -f ".claude/settings.local.json" ]; then
            # Extract allowed tools and format them for the action
            ALLOWED_TOOLS=$(jq -r '.permissions.allow[]' .claude/settings.local.json | tr '\n' ',' | sed 's/,$//')
            # Add additional tools needed for the GitHub Action environment
            ALLOWED_TOOLS="${ALLOWED_TOOLS},Edit,MultiEdit,Write,Task,TodoRead,TodoWrite"
            echo "allowed_tools=${ALLOWED_TOOLS}" >> "$GITHUB_OUTPUT"
            echo "Found allowed tools from settings.local.json"
          else
            # Default set of tools if settings file doesn't exist
            echo "allowed_tools=Bash(git:*),View,Glob(*),Grep(*),Read(*),Edit,MultiEdit,Write,Task,TodoRead,TodoWrite" >> "$GITHUB_OUTPUT"
            echo "Using default allowed tools"
          fi
      - name: Set up Docker Compose
        uses: docker/setup-compose-action@364cc21a5de5b1ee4a7f5f9d3fa374ce0ccde746 # v1.2.0
        with:
          version: ${{ env.DOCKER_COMPOSE_VERSION }}
      - name: Get GitHub App Token
        if: steps.check-access.outputs.authorized == 'true'
        id: app-token
        uses: ./.github/actions/github-app-token
        with:
          application-id: ${{ secrets.DEALROOMBA_APP_ID }}
          application-private-key: ${{ secrets.DEALROOMBA_APP_PRIVATE_KEY }}
          permissions: contents:read,metadata:read
      - name: Install Room CLI
        if: steps.check-access.outputs.authorized == 'true'
        env:
          # Use GitHub App token for private repo access, fallback to PAT or GITHUB_TOKEN
          GH_TOKEN: ${{ steps.app-token.outputs.token || secrets.DEALROOM_PAT || secrets.GITHUB_TOKEN }}
        run: |
          FILENAME="room-${ROOM_CLI_VERSION}-linux-amd64"
          echo "Looking for asset: ${FILENAME}"
          # Download from private repo using gh CLI with GitHub App token
          gh release download "${ROOM_CLI_VERSION}" \
              --repo dealroom/room \
              --pattern "${FILENAME}" \
              --output room
          chmod +x room
          mv room /usr/local/bin/room
          room -v
      - name: Run Claude Code
        if: steps.check-access.outputs.authorized == 'true'
        uses: anthropics/claude-code-action@a804c9e83f1c7a3288cc7a7bbca208491a4bb2f8 # v0.0.30
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          max_turns: 200
          timeout_minutes: 30
          allowed_tools: ${{ steps.parse-tools.outputs.allowed_tools }}
          custom_instructions: |
            - Be concise, direct to the point and actionable in responses
            - Always provide specific code solutions when requested
            - Use `room lint` command to fix linting issues automatically
            - Use `room lint exec {cmd}` to run arbitrary commands inside the linting environment with correct linter versions
            - `docker compose` (v2 syntax) is available and preferred for containerized workflows, especially when docker-compose.yml exists
            - When encountering complex problems that require deep reasoning, use the word "think" to enable extended thinking mode
